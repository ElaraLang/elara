module Elara.Prim

type List a = Cons a (List a) | Nil

type Tuple2 a b = Tuple2 a b

def consString : Char -> String -> String
let consString = elaraPrimitive "consString"

def unconsString : String -> Tuple2 Char String
let unconsString = elaraPrimitive "unconsString"

def stringLength : String -> Int
let stringLength = elaraPrimitive "stringLength"

def undefined : a	
let undefined = elaraPrimitive "undefined"	

def println : String -> IO ()
let println = elaraPrimitive "println"

def (+) : Int -> Int -> Int	
let (+) = elaraPrimitive "+"

def (-) : Int -> Int -> Int	
let (-) = elaraPrimitive "-"	

def (*) : Int -> Int -> Int	
let (*) = elaraPrimitive "*"	

def (==) : a -> a -> Bool	
let (==) = elaraPrimitive "=="	

def toString : a -> String
let toString = elaraPrimitive "toString"