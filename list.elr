module List
import Elara.Prim

def isEmpty : [a] -> Bool
let isEmpty l =
    match l with
        [] -> True
        (x::xs) -> False

def length : [a] -> Int
let length l =
    match l with
        [] -> 0
        (x::xs) -> 1 + length xs

def sum : [Int] -> Int	
let sum a = 	
    match a with	
      [] -> 0	
      (x::xs) -> x + sum xs

def reverse : [a] -> [a]	
let reverse a = 	
    match a with	
      [] -> []	
      (x::xs) -> reverse xs <> [x]	

def head : [a] -> a	
let head a = 	
    match a with	
      [] -> undefined	
      (x::xs) -> x	

def last : [a] -> a	
let last a = 	
    match a with	
      [] -> undefined	
      (x::xs) -> if xs == [] then x else last xs	


def map : (a -> b) -> [a] -> [b]	
let map f a = 	
    match a with	
      [] -> []	
      (x::xs) -> f x :: map f xs	

def filter : (a -> Bool) -> [a] -> [a]	
let filter f a = 	
    match a with	
      [] -> []	
      (x::xs) -> if f x then x :: filter f xs else filter f xs	

infixr 5 <>	
def (<>) : [a] -> [a] -> [a]	
let (<>) a b = 	
    match a with	
      [] -> b	
      (x::xs) -> x :: (xs <> b)	