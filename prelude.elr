module Prelude
import Elara.Prim

def println : String -> IO ()
let println = elaraPrimitive "println"

def (-) : Int -> Int -> Int
let (-) = elaraPrimitive "-"

def (*) : Int -> Int -> Int
let (*) = elaraPrimitive "*"

def (==) : a -> a -> Bool
let (==) = elaraPrimitive "=="

def toString : a -> String
let toString = elaraPrimitive "toString"

def (++) : [a] -> [a] -> [a]
let (++) a b = 
    match a with
      [] -> b
      (x::xs) -> x :: (xs ++ b)

def reverse : [a] -> [a]
let reverse x = 
    match x with
      [] -> []
      (x::xs) -> reverse xs ++ [x]