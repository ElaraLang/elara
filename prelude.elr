module Prelude
import Elara.Prim

infixr 1 >>
def (>>) : (a -> b) -> (b -> c) -> (a -> c)
let (>>) f g = \x -> g (f x)

def identity : a -> a
let identity a = a

def print : a -> IO ()
let print a = println (toString a)

def map : (a -> b) -> [a] -> [b]
let map f l =
    match l with
      [] -> []
      (x :: xs) -> f x :: map f xs