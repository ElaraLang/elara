module Prelude exposing (..)

import Elara.Prim exposing (..)

def Prelude.map : ((a_11 -> b_12) -> ([ a_11 ] -> [ b_12 ]))
let Prelude.map =
    (\ f_13 -> ((\ a_14 -> ((match a_14  with { [  ]  -> [  ] ; (x_15  :: xs_16 )  -> ((Elara.Prim.cons  (f_13  x_15 ) )  ((Prelude.map  f_13 )  xs_16 ) ) }) )) )) 

def Prelude.print : (a_17 -> Elara.Prim.IO ())
let Prelude.print =
    (\ a_18 -> ((Elara.Prim.println  (Elara.Prim.toString  a_18 ) ) )) 

def Prelude.reverse : ([ a_19 ] -> [ a_19 ])
let Prelude.reverse =
    (\ a_20 -> ((match a_20  with { [  ]  -> [  ] ; (x_21  :: xs_22 )  -> ((Prelude.(++)  (Prelude.reverse  xs_22 ) )  [ x_21  ] ) }) )) 

def Prelude.(++) : ([ a_23 ] -> ([ a_23 ] -> [ a_23 ]))
let Prelude.(++) =
    (\ a_24 -> ((\ b_25 -> ((match a_24  with { [  ]  -> b_25 ; (x_26  :: xs_27 )  -> ((Elara.Prim.cons  x_26 )  ((Prelude.(++)  xs_27 )  b_25 ) ) }) )) )) 
