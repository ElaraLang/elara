module Elara.Prim exposing (..)



def Elara.Prim.cons : forall (a_1 : Type) . a_1 -> List a_1 -> List a_1
let Elara.Prim.cons =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "cons" : (Text)) : (forall (a_1 : Type) .
                                                                 a_1 ->
                                                                 List a_1 ->
                                                                   List a_1)

def Elara.Prim.empty : forall (a_2 : Type) . List a_2
let Elara.Prim.empty =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "empty" : (Text)) : (forall (a_2 : Type) .
                                                                  List a_2)

def Elara.Prim.ioBind : forall (a_3 : Type) .
                        forall (b_4 : Type) .
                          IO a_3  -> (a_3 -> IO b_4 ) -> IO b_4 
let Elara.Prim.ioBind =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "ioBind" : (Text)) : (forall (a_3 : Type) .
                                                                 forall (b_4 : Type) .
                                                                   IO a_3  ->
                                                                   ( a_3 ->
                                                                       IO b_4 
                                                                   ) ->
                                                                     IO b_4 )

def Elara.Prim.listToString : List Char -> Text
let Elara.Prim.listToString =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "listToString" : (Text)) : (List
                                                                         Char ->
                                                                         Text)

def Elara.Prim.println : Text -> IO Unit 
let Elara.Prim.println =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text -> a_0) "println" : (Text)) : (Text ->
                                                                          IO Unit
                                                                             )

def Elara.Prim.readFile : Text -> IO List Text 
let Elara.Prim.readFile =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text -> a_0) "readFile" : (Text)) : (Text ->
                                                                           IO List
                                                                                Text
                                                                              )

def Elara.Prim.stringToList : Text -> List Char
let Elara.Prim.stringToList =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "stringToList" : (Text)) : (Text ->
                                                                         List
                                                                           Char)

def Elara.Prim.toString : forall (a_5 : Type) . a_5 -> Text
let Elara.Prim.toString =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "toString" : (Text)) : (forall (a_5 : Type) .
                                                                     a_5 ->
                                                                       Text)

def Elara.Prim.undefined : forall (a_6 : Type) . a_6
let Elara.Prim.undefined =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "undefined" : (Text)) : (forall (a_6 : Type) .
                                                                      a_6)

def Elara.Prim.(*) : Integer -> Integer -> Integer
let Elara.Prim.(*) =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text -> a_0) "*" : (Text)) : (Integer ->
                                                                  Integer ->
                                                                    Integer)

def Elara.Prim.(+) : Integer -> Integer -> Integer
let Elara.Prim.(+) =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text -> a_0) "+" : (Text)) : (Integer ->
                                                                  Integer ->
                                                                    Integer)

def Elara.Prim.(-) : Integer -> Integer -> Integer
let Elara.Prim.(-) =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text -> a_0) "-" : (Text)) : (Integer ->
                                                                  Integer ->
                                                                    Integer)

def Elara.Prim.(==) : forall (a_7 : Type) . a_7 -> a_7 -> Bool
let Elara.Prim.(==) =
    (Elara.Prim.elaraPrimitive : (forall (a_0 : Type) .
                                    Text ->
                                      a_0) "==" : (Text)) : (forall (a_7 : Type) .
                                                               a_7 ->
                                                               a_7 ->
                                                                 Bool)

def Elara.Prim.(|>) : forall (a_8 : Type) .
                      forall (b_9 : Type) .
                        a_8 -> (a_8 -> b_9) -> b_9
let Elara.Prim.(|>) =
    (\ a_10 -> ((\ f_11 -> ((f_11 : (forall (a_8 : Type) .
                                     forall (b_9 : Type) .
                                       a_8 -> b_9) a_10 : (forall (a_8 : Type) .
                                                             a_8)) : (forall (b_9 : Type) .
                                                                        b_9))) : (forall (a_8 : Type) .
                                                                                  forall (b_9 : Type) .
                                                                                    ( a_8 ->
                                                                                        b_9
                                                                                    ) ->
                                                                                      b_9))) : (forall (a_8 : Type) .
                                                                                                forall (b_9 : Type) .
                                                                                                  a_8 ->
                                                                                                  ( a_8 ->
                                                                                                      b_9
                                                                                                  ) ->
                                                                                                    b_9)
