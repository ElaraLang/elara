module Prelude exposing (..)

import Elara.Prim exposing (..)

def Prelude.map : forall (a_7 : Type) .
                  forall (b_8 : Type) .
                    (a_7 -> b_8) -> List a_7 -> List b_8
let Prelude.map =
    (\ f_9 -> ((\ a_10 -> ((match a_10  with { [  ] : List
                                                        a_7 -> [  ] ; (x_11 : a_7 :: xs_12 : List
                                                                                               a_7) : List
                                                                                                        a_7 -> ((Elara.Prim.cons  (f_9  x_11 ) )  ((Prelude.map  f_9 )  xs_12 ) ) }) )) )) 

def Prelude.(++) : forall (a_17 : Type) . List a_17 -> List a_17 -> List a_17
let Prelude.(++) =
    (\ a_18 -> ((\ b_19 -> ((match a_18  with { [  ] : List
                                                         a_17 -> b_19 ; (x_20 : a_17 :: xs_21 : List
                                                                                                  a_17) : List
                                                                                                            a_17 -> ((Elara.Prim.cons  x_20 )  ((Prelude.(++)  xs_21 )  b_19 ) ) }) )) )) 

def Prelude.reverse : forall (a_13 : Type) . List a_13 -> List a_13
let Prelude.reverse =
    (\ a_14 -> ((match a_14  with { [  ] : List
                                             a_13 -> [  ] ; (x_15 : a_13 :: xs_16 : List
                                                                                      a_13) : List
                                                                                                a_13 -> ((Prelude.(++)  (Prelude.reverse  xs_16 ) )  [ x_15  ] ) }) )) 

def Prelude.(|>) : forall (a_22 : Type) .
                   forall (b_23 : Type) .
                     a_22 -> (a_22 -> b_23) -> b_23
let Prelude.(|>) =
    (\ a_24 -> ((\ f_25 -> ((f_25  a_24 ) )) )) 
