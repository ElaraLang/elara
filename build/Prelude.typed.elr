module Prelude exposing (..)



def Prelude.println : Text -> IO Unit 
let Prelude.println =
    ((Elara.Prim.elaraPrimitive : forall (a_0 : Type) . Text -> a_0 @Text ->
                                                                       IO Unit
                                                                          ) : Text ->
                                                                                IO Unit
                                                                                    "println" : Text) : Text ->
                                                                                                          IO Unit


def Prelude.toString : forall (a_3 : Type) . a_3 -> Text
let Prelude.toString =
    ((Elara.Prim.elaraPrimitive : forall (a_0 : Type) . Text -> a_0 @a_3 ->
                                                                       Text) : forall (a_3 : Type) .
                                                                                 a_3 ->
                                                                                   Text "toString" : Text) : forall (a_3 : Type) .
                                                                                                               a_3 ->
                                                                                                                 Text

def Prelude.(*) : Integer -> Integer -> Integer
let Prelude.(*) =
    ((Elara.Prim.elaraPrimitive : forall (a_0 : Type) . Text -> a_0 @Integer ->
                                                                     Integer ->
                                                                       Integer) : Integer ->
                                                                                  Integer ->
                                                                                    Integer "*" : Text) : Integer ->
                                                                                                          Integer ->
                                                                                                            Integer

def Prelude.(-) : Integer -> Integer -> Integer
let Prelude.(-) =
    ((Elara.Prim.elaraPrimitive : forall (a_0 : Type) . Text -> a_0 @Integer ->
                                                                     Integer ->
                                                                       Integer) : Integer ->
                                                                                  Integer ->
                                                                                    Integer "-" : Text) : Integer ->
                                                                                                          Integer ->
                                                                                                            Integer

def Prelude.(==) : forall (a_4 : Type) . a_4 -> a_4 -> Bool
let Prelude.(==) =
    ((Elara.Prim.elaraPrimitive : forall (a_0 : Type) . Text -> a_0 @a_4 ->
                                                                     a_4 ->
                                                                       Bool) : forall (a_4 : Type) .
                                                                                 a_4 ->
                                                                                 a_4 ->
                                                                                   Bool "==" : Text) : forall (a_4 : Type) .
                                                                                                         a_4 ->
                                                                                                         a_4 ->
                                                                                                           Bool
