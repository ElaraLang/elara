module Elara.Prim
{ Elara.Prim.cons : forall (a_1 : Type). a_1 -> [a_1] -> [a_1]
    = Elara.Prim.elaraPrimitive "cons"
; 
Elara.Prim.empty : forall (a_2 : Type). [a_2]
    = Elara.Prim.elaraPrimitive "empty"
; 
Elara.Prim.ioBind : forall (a_3 : Type). forall (b_4 : Type). IO a_3 -> (a_3 -> IO b_4) -> IO b_4
    = Elara.Prim.elaraPrimitive "ioBind"
; 
Elara.Prim.listToString : [Char] -> String
    = Elara.Prim.elaraPrimitive "listToString"
; 
Elara.Prim.println : String -> IO ()
    = Elara.Prim.elaraPrimitive "println"
; 
Elara.Prim.readFile : String -> IO ([String])
    = Elara.Prim.elaraPrimitive "readFile"
; 
Elara.Prim.stringToList : String -> [Char]
    = Elara.Prim.elaraPrimitive "stringToList"
; 
Elara.Prim.toString : forall (a_5 : Type). a_5 -> String
    = Elara.Prim.elaraPrimitive "toString"
; 
Elara.Prim.undefined : forall (a_6 : Type). a_6
    = Elara.Prim.elaraPrimitive "undefined"
; 
Elara.Prim.* : Int -> Int -> Int
    = Elara.Prim.elaraPrimitive "*"
; 
Elara.Prim.+ : Int -> Int -> Int
    = Elara.Prim.elaraPrimitive "+"
; 
Elara.Prim.- : Int -> Int -> Int
    = Elara.Prim.elaraPrimitive "-"
; 
Elara.Prim.== : forall (a_7 : Type). a_7 -> a_7 -> Bool
    = Elara.Prim.elaraPrimitive "=="
; 
Elara.Prim.|> : forall (a_8 : Type). forall (b_9 : Type). a_8 -> (a_8 -> b_9) -> b_9
    = \ (a_10 : a_8) (f_11 : a_8 -> b_9) -> f_11 a_10 }