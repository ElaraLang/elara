module Elara.Prim
{ Elara.Prim.cons : forall (a_1 : Type). a_1 -> [a_1] -> [a_1]
    = Elara.Prim.elaraPrimitive "cons"
; 
Elara.Prim.empty : forall (a_2 : Type). [a_2]
    = Elara.Prim.elaraPrimitive "empty"
; 
Elara.Prim.println : String -> IO ()
    = Elara.Prim.elaraPrimitive "println"
; 
Elara.Prim.toString : forall (a_3 : Type). a_3 -> String
    = Elara.Prim.elaraPrimitive "toString"
; 
Elara.Prim.undefined : forall (a_4 : Type). a_4
    = Elara.Prim.elaraPrimitive "undefined"
; 
Elara.Prim.* : Int -> Int -> Int
    = Elara.Prim.elaraPrimitive "*"
; 
Elara.Prim.- : Int -> Int -> Int
    = Elara.Prim.elaraPrimitive "-"
; 
Elara.Prim.== : forall (a_5 : Type). a_5 -> a_5 -> Bool
    = Elara.Prim.elaraPrimitive "=="
; 
Elara.Prim.|> : forall (a_6 : Type). forall (b_7 : Type). a_6 -> (a_6 -> b_7) -> b_7
    = \ (a_8 : a_6) (f_9 : a_6 -> b_7) -> f_9 a_8 }