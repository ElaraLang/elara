module Prelude
{ Prelude.map : forall (a_11 : Type). forall (b_12 : Type). (a_11 -> b_12) -> [a_11] -> [b_12]
    = \ (f_13 : a_11 -> b_12) (a_14 : [a_11]) -> case a_14 of (a_81 : forall (a_11 : Type). [a_11])
        { Elara.Prim.empty : [([a_11])]  -> Elara.Prim.empty; Elara.Prim.cons : [] (x_15 : a_11) (xs_16 : [a_11]) -> Elara.Prim.cons (f_13 x_15) (Prelude.map f_13 xs_16)}
; 
Prelude.print : forall (a_17 : Type). a_17 -> IO ()
    = \ (a_18 : a_17) -> Elara.Prim.println (Elara.Prim.toString a_18)
; 
Prelude.++ : forall (a_23 : Type). [a_23] -> [a_23] -> [a_23]
    = \ (a_24 : [a_23]) (b_25 : [a_23]) -> case a_24 of (a_82 : forall (a_23 : Type). [a_23])
        { Elara.Prim.empty : [([a_23])]  -> b_25; Elara.Prim.cons : [] (x_26 : a_23) (xs_27 : [a_23]) -> Elara.Prim.cons x_26 (Prelude.++ xs_27 b_25)}
; 
Prelude.reverse : forall (a_19 : Type). [a_19] -> [a_19]
    = \ (a_20 : [a_19]) -> case a_20 of (a_83 : forall (a_19 : Type). [a_19])
        { Elara.Prim.empty : [([a_19])]  -> Elara.Prim.empty; Elara.Prim.cons : [] (x_21 : a_19) (xs_22 : [a_19]) -> Prelude.++ (Prelude.reverse xs_22) (Elara.Prim.cons x_21 Elara.Prim.empty)} }