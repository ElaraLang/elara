module Prelude
{ Prelude.map : forall (a_13 : Type). forall (b_14 : Type). (a_13 -> b_14) -> [a_13] -> [b_14]
    = \ (f_15 : a_13 -> b_14) (a_16 : [a_13]) -> case a_16 of (a_87 : forall (a_13 : Type). [a_13])
        { Elara.Prim.empty : [([a_13])]  -> Elara.Prim.empty; Elara.Prim.cons : [] (x_17 : a_13) (xs_18 : [a_13]) -> Elara.Prim.cons (f_15 x_17) (Prelude.map f_15 xs_18)}
; 
Prelude.++ : forall (a_23 : Type). [a_23] -> [a_23] -> [a_23]
    = \ (a_24 : [a_23]) (b_25 : [a_23]) -> case a_24 of (a_88 : forall (a_23 : Type). [a_23])
        { Elara.Prim.empty : [([a_23])]  -> b_25; Elara.Prim.cons : [] (x_26 : a_23) (xs_27 : [a_23]) -> Elara.Prim.cons x_26 (Prelude.++ xs_27 b_25)}
; 
Prelude.reverse : forall (a_19 : Type). [a_19] -> [a_19]
    = \ (a_20 : [a_19]) -> case a_20 of (a_89 : forall (a_19 : Type). [a_19])
        { Elara.Prim.empty : [([a_19])]  -> Elara.Prim.empty; Elara.Prim.cons : [] (x_21 : a_19) (xs_22 : [a_19]) -> Prelude.++ (Prelude.reverse xs_22) (Elara.Prim.cons x_21 Elara.Prim.empty)} }