module Main exposing (..)

import Prelude exposing (..)
import Elara.Prim exposing (..)

def Main.fact : (Elara.Prim.Int -> Elara.Prim.Int)
let Main.fact =
    (\ n_10 -> ((if ((Elara.Prim.(==)  n_10 )  0 )  then 1  else ((Elara.Prim.(*)  n_10 )  (Main.fact  ((Elara.Prim.(-)  n_10 )  1 ) ) ) ) )) 

let Main.main =
    (Prelude.print  (Main.part1  "1abc2" ) ) 

let Main.part1 =
    (\ input_11 -> (let chars_13  = ((Prelude.filter  (\ x_12 -> (((Prelude.(/=)  x_12 )  -1 ) )) )  ((Elara.Prim.(|>)  (Elara.Prim.stringToList  input_11 ) )  (Prelude.map  Prelude.charToInt ) ) )  in let first_14  = (Prelude.head  chars_13 )  in let last_15  = (Prelude.last  chars_13 )  in ((Elara.Prim.(*)  first_14 )  ((Elara.Prim.(+)  10 )  last_15 ) )    )) 
