module Main exposing (..)

import Prelude exposing (..)
import Elara.Prim exposing (..)

def Main.fact : (Elara.Prim.Int -> Elara.Prim.Int)
let Main.fact =
    (\ n_12 -> ((if ((Elara.Prim.(==)  n_12 )  0 )  then 1  else ((Elara.Prim.(*)  n_12 )  (Main.fact  ((Elara.Prim.(-)  n_12 )  1 ) ) ) ) )) 

let Main.main =
    let contents_13  = (Elara.Prim.readFile  "../input.txt" )  in ((Elara.Prim.ioBind  contents_13 )  (\ contents_14 -> (((Elara.Prim.(|>)  (Prelude.sum  ((Prelude.map  Main.part1 )  contents_14 ) ) )  Prelude.print ) )) )  

def Main.part1 : (Elara.Prim.String -> Elara.Prim.Int)
let Main.part1 =
    (\ input_15 -> (let chars_17  = ((Prelude.filter  (\ x_16 -> (((Prelude.(/=)  x_16 )  -1 ) )) )  ((Elara.Prim.(|>)  (Elara.Prim.stringToList  input_15 ) )  (Prelude.map  Prelude.charToInt ) ) )  in (if (Prelude.isEmpty  chars_17 )  then 0  else let first_18  = (Prelude.head  chars_17 )  in let last_19  = (Prelude.last  chars_17 )  in ((Elara.Prim.(+)  ((Elara.Prim.(*)  first_18 )  10 ) )  last_19 )   )  )) 
