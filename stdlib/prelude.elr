module Prelude
import Elara.Prim
import List

def (*>) : IO a -> IO b -> IO b	
let (*>) a b = a >>= \x -> b	

infixr 1 >>	
def (>>) : (a -> b) -> (b -> c) -> (a -> c)	
let (>>) f g = \x -> g (f x)	

def sequence : [IO a] -> IO [a]	
let sequence a = 	
    match a with	
      [] -> pure []
      (x::xs) -> x *> sequence xs	

def sequence_ : [IO a] -> IO ()	
let sequence_ a = 	
    match a with	
      [] -> pure ()	
      (x::xs) -> x *> sequence_ xs	


def identity : a -> a
let identity a = a


def print : a -> IO ()
let print a = println (toString a)

def charToInt : Char -> Int	
let charToInt c = 	
    if c == '0' then 0	
    else if c == '1' then 1	
    else if c == '2' then 2	
    else if c == '3' then 3	
    else if c == '4' then 4	
    else if c == '5' then 5	
    else if c == '6' then 6	
    else if c == '7' then 7	
    else if c == '8' then 8	
    else if c == '9' then 9	
    else -1	



infixr 5 ++	
def (++) : String -> String -> String	
let (++) a b = listToString ((stringToList a) <> (stringToList b))	


def not : Bool -> Bool	
let not a = 	
    if a then False else True	

def (/=) : a -> a -> Bool	
let (/=) a b = 	
    not (a == b)	


def listToString : [Char] -> String
let listToString a =	
    match a with	
      [] -> ""	
      (x::xs) -> consString x (listToString xs)

def stringToList : String -> [Char]
let stringToList a =	
    let len = stringLength a
    if len == 0 then []  
    else	
        let c = unconsString a
        match c with
          Tuple2 c cs -> c :: stringToList cs